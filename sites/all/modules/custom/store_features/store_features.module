<?php


/**
 * Implements hook_menu().
 */
function store_features_menu() {
  $items = array();

  $items['admin/config/development/store_features'] = array(
    'title' => 'store_features Admin Features Tools',
    'description' => 'Features tools.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('store_features_admin_features_form'),
    'file' => 'store_features.admin.inc',
    'access arguments' => array('use store_features features admin tools'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function store_features_permission() {
  return array(
    'use store_features admin tool' => array(
      'title' => t('Use store_features Admin Tools'),
      'description' => t('Use store_features Admin Tools'),
    ),
    'use store_features features admin tools' => array(
      'title' => t('Use store_features Features Admin Tools'),
      'description' => t('Use store_features Features Admin Tools'),
    ),
  );
}


/**
 * Alter feature link in order to be sure features are save in English
 *
 * Implements hook_menu_link_alter().
 */
function store_features_menu_link_alter(&$item) {
  if (stripos($item['link_path'], 'admin/structure/features') !== FALSE) {
    $languages = language_list();

    if (array_key_exists('en', $languages)) {
      $item['options']['language'] = $languages['en'];
    }
  }
}

/**
 * Redirect features when not in English
 *
 * Implements hook_init().
 */
function store_features_init() {
  $current_path = current_path();
  if (stripos($current_path, 'admin/structure/features') !== FALSE) {
    if ($GLOBALS['language']->language !== 'en') {
      $languages = language_list();
      if (array_key_exists('en', $languages)) {
        $english = $languages['en'];
        if ($english->enabled == '0') {
          $GLOBALS['language'] = $english;
          drupal_set_message('Default english language is disable, language has been forced', 'warning', FALSE);
        }
        else {
          drupal_set_message('You where trying to access features page while not using drupal default english, you were redirected', 'warning', FALSE);
          drupal_goto($current_path, array('language' => $english));
        }
      }
      else {
        drupal_set_message('Default english language is not present, features may appear as falsely overridden. Be careful while recreating feature', 'warning', FALSE);
      }
    }
  }
}

/**
 * Persist features by names
 *
 * @param array $features_names
 */
function store_features_persist_features_by_names(array $features_names, $soft = FALSE, $all = FALSE) {
  module_load_include('export.inc', 'features');
  $features = features_get_component_states($features_names, TRUE);

  foreach ($features as &$feature) {
    $feature = array_keys($feature);
  }

  features_rebuild($features);
  features_revert($features);

  drupal_flush_all_caches();

  // store featured images styles
  $featured_image_styles = store_features_get_featured_imagesstyles($features);
  store_features_persist_imagesstyles($featured_image_styles);

  // store featured contexts
  $featured_contexts = store_features_get_featured_contexts($features);
  store_features_persist_contexts($featured_contexts);

  // store featured views
  $featured_views = _store_features_get_featured($features_names, 'views_view', 'views');
  store_features_persist_views($featured_views);

  // store featured display modes
  $featured_display_modes = _store_features_get_featured($features_names, 'ds_view_modes', 'ds');
  store_features_persist_ds_view_modes($featured_display_modes);

  // store featured ds fields
  $featured_ds_fields = _store_features_get_featured($features_names, 'ds_fields', 'ds');
  store_features_persist_ds_fields($featured_ds_fields);

  // store featured ds layout
  $featured_ds_layout_settings = _store_features_get_featured($features_names, 'ds_layout_settings', 'ds');
  store_features_persist_ds_layout_settings($featured_ds_layout_settings);

  // store featured ds settings
  $featured_ds_field_settings = _store_features_get_featured($features_names, 'ds_field_settings', 'ds');
  store_features_persist_ds_field_settings($featured_ds_field_settings);

  // store field_groups
  $featured_field_groups = _store_features_get_featured($features_names, 'field_group', 'field_group');
  store_features_persist_field_groups($featured_field_groups);

  // store featured rules
  $featured_rules = _store_features_get_featured($features_names, 'rules_config', 'rules');
  store_features_persist_rules($featured_rules);

  // store featured facets
  $featured_facets = store_features_get_featured_facets($features);
  store_features_persist_facets($featured_facets);

  if (!$soft) {
    module_disable($features_names);
    drupal_uninstall_modules($features_names);
  }
}

//
// helper functions
/**
 * Store feature database views in DB
 *
 * @param array $views_names
 * @return bool
 */
function store_features_persist_views(array $views_names = array()) {
  // if there is no views module
  // stop there
  if (!module_exists('views')) {
    return FALSE;
  }

  $views = array();

  foreach ($views_names as $views_name) {
    $views[$views_name] = views_get_view($views_name, TRUE);
  }

  foreach ($views as $view) {
    // views can be checked if present in code only
    if (isset($view->in_code_only) && $view->in_code_only === TRUE) {
      $view->save();
    }
  }

  return TRUE;
}

/**
 * @param array $view_modes
 * @return bool
 */
function store_features_persist_ds_view_modes(array $view_modes = array()) {
  if (!module_exists('ds')) {
    return FALSE;
  }

  ctools_include('export');
  $all_view_modes = ctools_export_crud_load_all('ds_view_modes');

  foreach ($all_view_modes as $view_mode) {
    if (in_array($view_mode->view_mode, $view_modes) || empty($view_modes)) {
      _store_features_persist_ds_view_mode($view_mode);
    }
  }

}

/**
 * Store DS view Mode
 *
 * @param $view_mode
 */
function _store_features_persist_ds_view_mode($view_mode) {
  // Delete previous view_mode configuration (if any)
  db_delete('ds_view_modes')
    ->condition('view_mode', $view_mode->view_mode)
    ->execute();

  // Save the new view mode.
  drupal_write_record('ds_view_modes', $view_mode);

  // Clear entity info cache and trigger menu build on next request.
  cache_clear_all('entity_info', 'cache', TRUE);
  variable_set('menu_rebuild_needed', TRUE);
}


/**
 * Get enabled modules
 * @return mixed
 */
function _store_features_get_enabled_modules() {
  static $modules;

  if (NULL == $modules) {
    $modules = system_list('module_enabled');
  }

  return $modules;
}

/**
 * Get custom modules
 *
 * @return array
 */
function store_features_get_custom_modules() {
  static $custom_modules;

  if (NULL == $custom_modules) {
    $custom_modules = array();

    foreach (_store_features_get_enabled_modules() as $module_name => $module_datas) {
      if (stripos($module_datas->filename, 'sites/all/modules/custom') === 0 || stripos($module_datas->filename, 'sites/all/modules/features') === 0) {
        $custom_modules[$module_name] = $module_datas;
      }
    }
  }

  return $custom_modules;
}

/**
 * Implements hook_action_info().
 */

function store_features_get_custom_features($all = false) {
  if (!$all) { 
   static $features;
  }

  if (NULL == $features) {
    $features = array();

    foreach (store_features_get_custom_modules() as $module_name => $module_datas) {
      if (isset($module_datas->info['features'])) {
        $features[$module_name] = $module_datas;
      }
    }
  }

  return $features;
}

/**
 * @param array $features Features list
 * @param $feature_data_name Featured data name
 * @param $dependency Module dependency
 * @return array
 */
function _store_features_get_featured(array $features, $feature_data_name, $dependency) {
  if (!module_exists($dependency)) {
    return array();
  }

  if (empty($features)) {
    $features = store_features_get_custom_features();
  }
  else {
    $modules = _store_features_get_enabled_modules();
    $features_names = $features;
    $features = array();
    foreach ($features_names as $feature_name) {
      $features[$feature_name] = $modules[$feature_name];
    }
  }

  $featured_data = array();

  foreach ($features as $module_name => $module_datas) {
    if (!empty($module_datas->info['features'][$feature_data_name]) && is_array($module_datas->info['features'][$feature_data_name])) {
      //$featured_views = array_unique(array_merge(array(1,2,3), array(3,4,5)));
      array_walk($module_datas->info['features'][$feature_data_name], function ($view_name) use (&$featured_data) {
        if (!in_array($view_name, $featured_data)) {
          array_push($featured_data, $view_name);
        }
      });
    }
  }

  return $featured_data;
}

/**
 * Get featured contexts
 *
 * @param array $features
 * @return array
 */
function store_features_get_featured_contexts($features = array()) {
  $contexts = array();
  $modules_implement_contexts = ctools_plugin_api_include('context', 'context', 3, 3);
  foreach ($modules_implement_contexts as $module_name => $module) {
    if (array_key_exists($module_name, $features)) {
      $module_contexts = module_invoke($module_name, 'context_default_contexts');
      foreach ($module_contexts as $context) {
        array_push($contexts, $context);
      }
    }
  }

  return $contexts;
}

/**
 * Persit contexts
 *
 * @param $contexts
 */
function store_features_persist_contexts($contexts) {
  foreach ($contexts as $context) {
    context_save($context);
  }
}

/**
 * Get featured imagestyles
 *
 * @param array $features
 * @return array
 */
function store_features_get_featured_imagesstyles($features = array()) {
  $styles = array();
  // Select the module-defined styles.
  foreach (module_implements('image_default_styles') as $module) {
    if (array_key_exists($module, $features)) {
      $module_styles = module_invoke($module, 'image_default_styles');
      $styles = array_merge($styles, $module_styles);
    }
  }

  return $styles;
}

/**
 * Persit image styles list
 *
 * @param array $images_styles
 * @return bool
 */
function store_features_persist_imagesstyles(array $images_styles) {
// Select all the user-defined styles.
  $user_styles = db_select('image_styles', NULL, array('fetch' => PDO::FETCH_ASSOC))
    ->fields('image_styles')
    ->orderBy('name')
    ->execute()
    ->fetchAllAssoc('name', PDO::FETCH_ASSOC);

  foreach ($images_styles as $style_name => $style) {
    $style['name'] = $style_name;
    if (array_key_exists($style_name, $user_styles)) {
      image_default_style_revert($user_styles[$style_name]);
    }
    image_default_style_save($style);
  }

  return TRUE;
}


/**
 * Persit ds_field list
 * @param array $ds_fields
 * @return bool
 */
function store_features_persist_ds_fields(array $ds_fields) {
  $custom_fields = ctools_export_crud_load_all('ds_fields');

  foreach ($custom_fields as $field_name => $field) {
    if (in_array($field_name, $ds_fields)) {
      // Delete previous field configuration.
      db_delete('ds_fields')
        ->condition('field', $field->field)
        ->execute();

      // Save field and clear ds_fields.
      drupal_write_record('ds_fields', $field);
      cache_clear_all('ds_fields:', 'cache', TRUE);
    }
  }


  return TRUE;
}

/**
 * @param array $ds_layout_settings
 */
function store_features_persist_ds_layout_settings(array $ds_layout_settings) {
  $all_ds_layout_settings = ctools_export_crud_load_all('ds_layout_settings');

  foreach ($all_ds_layout_settings as $id => $ds_layout_setting) {

    if (in_array($id, $ds_layout_settings)) {
      db_delete('ds_layout_settings')
        ->condition('id', $id)
        ->execute();
      drupal_write_record('ds_layout_settings', $ds_layout_setting);
    }

  }


  // Clear the ds_fields cache.
  cache_clear_all('ds_fields:', 'cache', TRUE);
  cache_clear_all('ds_layout_settings', 'cache');
}

/**
 * @param array $ds_layout_settings
 */
function store_features_persist_ds_field_settings(array $ds_layout_settings) {
  $all_ds_layout_settings = ctools_export_crud_load_all('ds_field_settings');

  foreach ($all_ds_layout_settings as $id => $ds_layout_setting) {

    if (in_array($id, $ds_layout_settings)) {
      db_delete('ds_field_settings')
        ->condition('id', $id)
        ->execute();
      drupal_write_record('ds_field_settings', $ds_layout_setting);
    }

  }


  // Clear the ds_fields cache.
  cache_clear_all('ds_fields:', 'cache', TRUE);
  cache_clear_all('ds_field_settings', 'cache');
}

/**
 * Persist field groups
 *
 * @param array $field_groups
 */
function store_features_persist_field_groups(array $field_groups) {
  foreach ($field_groups as $field_group) {
    $feature_field_group = field_group_load_field_group_by_identifier($field_group);
    field_group_group_save($feature_field_group);
  }
}

/**
 * Persist rules
 *
 * @param array $rules
 */
function store_features_persist_rules(array $rules) {
  foreach ($rules as $rule_name) {
    $rule_config = rules_config_load($rule_name);
    $rule_config->save();
  }
}

/**
 * Get featured facets
 *
 * @param array $features
 * @return array
 */
function store_features_get_featured_facets($features = array()) {
  $facets = array();
  $modules_implement_facets = ctools_plugin_api_include('facetapi', 'facetapi_defaults', 1, 1);
  foreach ($modules_implement_facets as $module_name => $module) {
    if (array_key_exists($module_name, $features)) {
      $module_facets = module_invoke($module_name, 'facetapi_default_facet_settings');
      foreach ($module_facets as $facet) {
        array_push($facets, $facet);
      }
    }
  }

  return $facets;
}

/**
 * Persist facets
 *
 * @param array $facets
 */
function store_features_persist_facets(array $facets) {
  foreach ($facets as $facet) {
    $facet_object = facetapi_facet_load($facet->facet, $facet->searcher);
    $adapter = facetapi_adapter_load($facet->searcher);
    $realm_settings = $adapter->getFacet($facet_object)->getSettings($facet->realm);
    $global_settings = $adapter->getFacet($facet_object)->getSettings();
    ctools_export_crud_save('facetapi', $realm_settings);
    ctools_export_crud_save('facetapi', $global_settings);
  }
}
